SYSRAM_START=$(( 0x0000 ))
DUTRAM_START=$(( 0x1000 ))
RECRAM_START=$(( 0x2000 ))
SYSRAM_LEN=$(( 4096 ))
DUTRAM_LEN=$(( 4096 ))
RECRAM_LEN=$(( 4096 ))
SYSRAM_END=$(( SYSRAM_START + SYSRAM_LEN - 1 ))
DUTRAM_END=$(( DUTRAM_START + DUTRAM_LEN - 1 ))
RECRAM_END=$(( RECRAM_START + RECRAM_LEN - 1 ))

NUM_BREAKPOINTS=4

LED0=$(( 0xff00 ))
LED1=$(( 0xff01 ))

SW0=$(( 0xff02 ))
SW1=$(( 0xff03 ))

ATOM0=$(( 0xff10 ))
ATOM1=$(( 0xff11 ))
ATOM2=$(( 0xff12 ))
ATOM3=$(( 0xff13 ))

ONES=$(( 0xff14 ))

REC_CTRL=$(( 0xff15 ))
REC_CTRL_SET_ADR=$((  1 << 0 ))
REC_CTRL_SET_TRIG=$(( 1 << 1 ))

NUM_COUNTERS=2
COUNTER_BASE=( $((0xff20)) $((0xff24)) )
COUNTER_COUNT_OFFSET=0
COUNTER_CTRL_OFFSET=0
COUNTER_SETCMP_OFFSET=1
COUNTER_SETIN_OFFSET=2
COUNTER_SETOUT_OFFSET=3
for i in ${!COUNTER_BASE[@]}; do
	(( COUNTER_COUNT0[i] = COUNTER_BASE[i] + COUNTER_COUNT_OFFSET     ))
	(( COUNTER_COUNT1[i] = COUNTER_BASE[i] + COUNTER_COUNT_OFFSET + 1 ))
	(( COUNTER_COUNT2[i] = COUNTER_BASE[i] + COUNTER_COUNT_OFFSET + 2 ))
	(( COUNTER_COUNT3[i] = COUNTER_BASE[i] + COUNTER_COUNT_OFFSET + 3 ))
	(( COUNTER_CTRL[i]   = COUNTER_BASE[i] + COUNTER_CTRL_OFFSET      ))
	(( COUNTER_SETCMP[i] = COUNTER_BASE[i] + COUNTER_SETCMP_OFFSET    ))
	(( COUNTER_SETIN[i]  = COUNTER_BASE[i] + COUNTER_SETIN_OFFSET     ))
	(( COUNTER_SETOUT[i] = COUNTER_BASE[i] + COUNTER_SETOUT_OFFSET    ))
done
COUNTER_CTRL_START=$((   1 << 0 ))
COUNTER_CTRL_STOP=$((    1 << 1 ))
COUNTER_CTRL_RESET=$((   1 << 2 ))
COUNTER_CTRL_LOAD=$((    1 << 3 ))
COUNTER_CTRL_COUNT=$((   1 << 4 ))
COUNTER_CTRL_SETLOAD=$(( 1 << 7 ))
COUNTER_SETIN_START=$((  1 << 0 ))
COUNTER_SETIN_STOP=$((   1 << 1 ))
COUNTER_SETIN_RESET=$((  1 << 2 ))
COUNTER_SETIN_LOAD=$((   1 << 3 ))
COUNTER_SETIN_COUNT=$((  1 << 4 ))

PA_OUT=$((       0xff40 ))
PA_SET=$((       0xff40 ))
PA_IN=$((        0xff41 ))
PA_RESET=$((     0xff41 ))
PA_SETTRIG=$((   0xff42 ))
PA_RESETTRIG=$(( 0xff43 ))

DUT_CTRL=$((     0xff50 ))
DUT_ADR_IN0=$((  0xff50 ))
DUT_ADR_IN1=$((  0xff51 ))
DUT_DATA_IN=$((  0xff52 ))
DUT_DATA_OUT=$(( 0xff52 ))
DUT_IN=$((       0xff53 ))
DUT_CMP_OUT=$((  0xff51 ))
DUT_CMP_IN=$((   0xff53 ))
DUT_CTRL_SET_RESET=$((   1 << 0 ))
DUT_CTRL_SET_DATA=$((    1 << 1 ))
DUT_CTRL_RESET_RESET=$(( 1 << 2 ))
DUT_CTRL_RESET_DATA=$((  1 << 3 ))
DUT_CMP_OUT_MATCH0=$((   1 << 0 ))
DUT_CMP_OUT_MATCH1=$((   1 << 1 ))
DUT_CMP_OUT_MATCH2=$((   1 << 2 ))
DUT_CMP_OUT_MATCH3=$((   1 << 3 ))
DUT_CMP_OUT_EDGE0=$((    1 << 4 ))
DUT_CMP_OUT_EDGE1=$((    1 << 5 ))
DUT_CMP_OUT_EDGE2=$((    1 << 6 ))
DUT_CMP_OUT_EDGE3=$((    1 << 7 ))
DUT_CMP_IN_VAL0=$((      1 << 0 ))
DUT_CMP_IN_VAL1=$((      1 << 1 ))
DUT_CMP_IN_VAL2=$((      1 << 2 ))
DUT_CMP_IN_VAL3=$((      1 << 3 ))
DUT_CMP_IN_MASK0=$((     1 << 4 ))
DUT_CMP_IN_MASK1=$((     1 << 5 ))
DUT_CMP_IN_MASK2=$((     1 << 6 ))
DUT_CMP_IN_MASK3=$((     1 << 7 ))

IFLAG=$(( 0xfffe ))
IEN=$((   0xffff ))

CGB_INCOMPATIBLE=
CGB_COMPATIBLE=$'\x80'
CGB_EXCLUSIVE=$'\xc0'

SGB_INCOMPATIBLE=
SGB_COMPATIBLE=$'\x03'

CART_TYPE_ROM_ONLY=
CART_TYPE_MBC1=$'\x01'
CART_TYPE_MBC1_SRAM=$'\x02'
CART_TYPE_MBC1_SRAM_BAT=$'\x03'
CART_TYPE_MBC2=$'\x05'
CART_TYPE_MBC2_BAT=$'\x06'
CART_TYPE_ROM_SRAM=$'\x08'
CART_TYPE_ROM_SRAM_BAT=$'\x09'
CART_TYPE_MMM01=$'\x0b'
CART_TYPE_MMM01_SRAM=$'\x0c'
CART_TYPE_MMM01_SRAM_BAT=$'\x0d'
CART_TYPE_MBC3_RTC_BAT=$'\x0f'
CART_TYPE_MBC3_RTC_SRAM_BAT=$'\x10'
CART_TYPE_MBC3=$'\x11'
CART_TYPE_MBC3_SRAM=$'\x12'
CART_TYPE_MBC3_SRAM_BAT=$'\x13'
CART_TYPE_MBC5=$'\x19'
CART_TYPE_MBC5_SRAM=$'\x1a'
CART_TYPE_MBC5_SRAM_BAT=$'\x1b'
CART_TYPE_MBC5_RUMBLE=$'\x1c'
CART_TYPE_MBC5_RUMBLE_SRAM=$'\x1d'
CART_TYPE_MBC5_RUMBLE_SRAM_BAT=$'\x1e'
CART_TYPE_MBC6=$'\x20'
CART_TYPE_MBC7=$'\x22'
CART_TYPE_CAMERA=$'\xfc'
CART_TYPE_TAMA5=$'\xfd'
CART_TYPE_HUC3=$'\xfe'
CART_TYPE_HUC1=$'\xff'

ROM_SIZE_32K=
ROM_SIZE_64K=$'\x01'
ROM_SIZE_128K=$'\x02'
ROM_SIZE_256K=$'\x03'
ROM_SIZE_512K=$'\x04'
ROM_SIZE_1M=$'\x05'
ROM_SIZE_2M=$'\x06'
ROM_SIZE_4M=$'\x07'
ROM_SIZE_8M=$'\x08'
ROM_SIZE_1M1=$'\x52'
ROM_SIZE_1M2=$'\x53'
ROM_SIZE_1M5=$'\x54'

RAM_SIZE_0=
RAM_SIZE_2K=$'\x01'
RAM_SIZE_8K=$'\x02'
RAM_SIZE_32K=$'\x03'
RAM_SIZE_128K=$'\x04'
RAM_SIZE_64K=$'\x05'

DEST_CODE_JAPAN=
DEST_CODE_OTHER=$'\x01'

OLD_LICENSE_DEFAULT=$'\x33'

function isint () { case ${1#[-+]} in ''|*[!0-9]*) return 1;; esac; }

function run () {
	gbdbg "$DEV" < <(
		if (($# == 0)); then
			set -- -
		fi
		used_stdin=
		while (($#)); do
			if [ "$1" == - ] && [ -z "$used_stdin" ]; then
				echo
				cat
				echo
				used_stdin=y
			else
				echo "$1"
			fi
			shift
		done
	)
}

function led () {
	local l=0
	local h=0
	if (($# == 1)) && isint "$1"; then
		run "wr $LED0 $(($1 & 0xff))" "wr $LED1 $((($1 >> 8) & 0xff))"
	elif (($# == 2)); then
		if [ "$1" == s ] && isint "$2"; then
			led 0xffff $((1 << $2))
		elif [ "$1" == r ] && isint "$2"; then
			led 0 $((1 << $2))
		else
			local val=$1
			local mask=$2
			if ! isint "$val" || ! isint "$mask"; then
				return 1
			fi
			if (((mask & 0xff) != 0 && (mask & 0xff) != 0xff)); then
				l=$(run "rd $LED0") || return $?
			fi
			if (((mask & 0xff00) != 0 && (mask & 0xff00) != 0xff00)); then
				h=$(run "rd $LED1") || return $?
			fi
			(( l = (l & ~(mask        & 0xff)) | (val        & 0xff & mask)        ))
			(( h = (h & ~((mask >> 8) & 0xff)) | ((val >> 8) & 0xff & (mask >> 8)) ))
			if (((mask & 0xff) != 0)); then
				if (((mask & 0xff00) != 0)); then
					run "wr $LED0 $l" "wr $LED0 $h"
				else
					run "wr $LED0 $l"
				fi
			elif (((mask & 0xff00) != 0)); then
				run "wr $LED1 $h"
			fi
		fi
	else
		return 1
	fi
}

function sysgen_led () {
	local l=0
	local h=0
	if (($# == 1)) && isint "$1"; then
		echo "
			ld a, $(($1 & 0xff))
			ld ($LED0), a
			ld a, $((($1 >> 8) & 0xff))
			ld ($LED1), a
		"
	elif (($# == 2)); then
		if [ "$1" == s ] && isint "$2"; then
			sysgen_led 0xffff $((1 << $2))
		elif [ "$1" == r ] && isint "$2"; then
			sysgen_led 0 $((1 << $2))
		else
			local val=$1
			local mask=$2
			if ! isint "$val" || ! isint "$mask"; then
				return 1
			fi
			if (((mask & 0xff) != 0 && (mask & 0xff) != 0xff)); then
				echo "
					ld a, ($LED0)
					and $((~(mask & 0xff)))
					or $((val & 0xff & mask))
					ld ($LED0), a
				"
			elif (((mask & 0xff) != 0)); then
				echo "
					ld a, $((val & 0xff))
					ld ($LED0), a
				"
			fi
			if (((mask & 0xff00) != 0 && (mask & 0xff00) != 0xff00)); then
				echo "
					ld a, ($LED1)
					and $((~((mask >> 8) & 0xff)))
					or $(((val >> 8) & 0xff & (mask >> 8)))
					ld ($LED1), a
				"
			elif (((mask & 0xff00) != 0)); then
				echo "
					ld a, $(((val >> 8) & 0xff))
					ld ($LED1), a
				"
			fi
		fi
	else
		return 1
	fi
}

function gen_set_atom () {
	if (($# != 1)) || ! isint "$1" || (($1 < 0 || $1 > 0xffffffff)); then
		return 1
	fi
	echo "
		wr $ATOM0 $(($1 & 0xff))
		wr $ATOM1 $((($1 >> 8) & 0xff))
		wr $ATOM2 $((($1 >> 16) & 0xff))
		wr $ATOM3 $((($1 >> 24) & 0xff))
	"
}

function sysgen_set_atom () {
	if (($# != 1)) || ! isint "$1" || (($1 < 0 || $1 > 0xffffffff)); then
		return 1
	fi
	echo "
		ld a, $(($1 & 0xff))
		ld ($ATOM0), a
		ld a, $((($1 >> 8) & 0xff))
		ld ($ATOM1), a
		ld a, $((($1 >> 16) & 0xff))
		ld ($ATOM2), a
		ld a, $((($1 >> 24) & 0xff))
		ld ($ATOM3), a
	"
}

function calc_hdr_check_sum () {
	local sum=$((0x19))
	while (($#)); do
		if ! isint "$1"; then
			return 1
		fi
		((sum += $1))
		shift
	done
	echo $((-sum & 0xff))
}

function gen_hdr () {
	# Args:
	#  1: game title
	#  2: game code
	#  3: CGB support code
	#  4: new license code
	#  5: SGB support code
	#  6: cartridge type
	#  7: ROM size
	#  8: RAM size
	#  9: destination code
	# 10: old license code
	# 11: ROM version

	local fld_len=( 11 4 1 2 1 1 1 1 1 1 1 )
	if (($# != ${#fld_len[*]})); then
		return 1
	fi

	local hdr=()
	local i
	for ((i = 0; i < ${#fld_len[*]}; i++)); do
		hdr+=( $({ echo -n "$1"; cat /dev/zero; } | od -vAn -tu1 -N${fld_len[i]}) )
		shift
	done

	local chksum
	chksum=$(calc_hdr_check_sum ${hdr[*]}) || return $?
	hdr+=( $chksum 0 0 )

	echo "
		# Place Nintendo logo
		buf a asm
			.db 0xCE 0xED 0x66 0x66 0xCC 0x0D 0x00 0x0B 0x03 0x73 0x00 0x83 0x00 0x0C 0x00 0x0D
			.db 0x00 0x08 0x11 0x1F 0x88 0x89 0x00 0x0E 0xDC 0xCC 0x6E 0xE6 0xDD 0xDD 0xD9 0x99
			.db 0xBB 0xBB 0x67 0x63 0x6E 0x0E 0xEC 0xCC 0xDD 0xDC 0x99 0x9F 0xBB 0xB9 0x33 0x3E
		end
		buf a store $((DUTRAM_START + 0x104))+48

		# Place header fields
		buf a asm
			.db ${hdr[*]}
		end
		buf a store $((DUTRAM_START + 0x134))+28
	"
}

function gen_default_hdr () {
	if (($# > 1)); then
		return 1
	fi
	local title=${1-TEST}
	gen_hdr "$title" TEST "$CGB_INCOMPATIBLE" ZZ "$SGB_INCOMPATIBLE" "$CART_TYPE_ROM_ONLY" \
	        "$ROM_SIZE_32K" "$RAM_SIZE_0" "$DEST_CODE_OTHER" "$OLD_LICENSE_DEFAULT" ""
}

function place_code () {
	if (($# != 1)) || ! isint "$1"; then
		return 1
	fi
	local adr=$1
	local dump
	dump=$(run 2>/dev/null < <(
		echo buf a asm
		cat
		echo end
		echo buf a store $adr
		echo buf a dump
	)) || return $?
	local elements=( $(echo "$dump" | sed -e '
		/:[^|]*|.*|/!d
		s/^[^|]*:\([^|]*\)|.*|[^|]*$/\1/
	') )
	echo ${#elements[*]}
}

function sys_code () {
	if (($# != 1)) || ! isint "$1"; then
		return 1
	fi
	local adr=$1
	place_code $((adr + SYSRAM_START)) < <(echo ".org $adr"; cat)
}

function dut_code () {
	if (($# != 1)) || ! isint "$1"; then
		return 1
	fi
	local adr=$1
	place_code $((adr + DUTRAM_START)) < <(echo ".org $adr"; cat)
}

function disable_all_breakpoints () {
	if (($#)); then
		return 1
	fi
	run < <(
		for ((i = 0; i < NUM_BREAKPOINTS; i++)); do
			echo "b $i 0xffff"
		done
	)
}

function init () {
	if (($#)); then
		return 1
	fi

	run h                   || return $?
	disable_all_breakpoints || return $?
	run "x di"              || return $?
	led 0                   || return $?

	local atom
	local hdr
	atom=$(gen_set_atom 0) || return $?
	hdr=$(gen_default_hdr) || return $?

	run >/dev/null 2>&1 < <(echo "
		# Disconnect routes to Port A Pin 0 trigger inputs to make sure DUT gets no clock
		$atom
		wr $PA_RESETTRIG 0xff
		wr $PA_SETTRIG   0xff

		# Set Port A Pin 0, 6 and 7 to high, others to low
		#  0: clk out
		#  6: T1
		#  7: T2
		wr $PA_SET   0xc1
		wr $PA_RESET 0x3e

		# Disable Interrupts
		wr $IEN 0

		# Reset stack pointer
		set sp $((SYSRAM_START + SYSRAM_LEN))
	") || return $?

	sys_run $((0x100)) 2 < <(echo "
		; Zero out lower 256 bytes
		xor a
		ld hl, 0
	loop1:
		ld (hli), a
		bit 0, h
		jr z, loop1

		; Zero out DUT RAM
		ld hl, $DUTRAM_START
	loop2:
		ld (hli), a
		bit 5, h  ; expects end of DUT RAM to be 0x1fff
		jr z, loop2
	") || return $?

	run >/dev/null 2>&1 < <(
		echo "
			# Place jump for safety at the end of DUT RAM
			buf a asm
				jr -2
			end
			buf a store $((DUTRAM_END - 1))+2

			# Place jump at DUT entry point
			buf a asm
				nop
				jr -2
			end
			buf a store $((DUTRAM_START + 0x100))+3

			$hdr

			# Disconnect always one source
			wr $ONES 0
		"

		# Reset counters
		for ((i = 0; i < NUM_COUNTERS; i++)); do
			echo wr ${COUNTER_SETIN[i]}  0xff
			echo wr ${COUNTER_SETOUT[i]} 0xff
			echo wr ${COUNTER_CTRL[i]}   $((COUNTER_CTRL_STOP | COUNTER_CTRL_RESET))
		done

		echo "
			# Reset DUT and DUT connector
			wr $DUT_CMP_OUT 0xff
			wr $DUT_CTRL    $((DUT_CTRL_RESET_DATA | DUT_CTRL_SET_RESET))

			# Reset interrupts flags
			wr $IFLAG 0

			# Deassert DUT reset
			wr $DUT_CTRL $DUT_CTRL_RESET_RESET
		"

		(
			# Make route 3 always one
			gen_set_always_one 3                || exit

			# Route 3 to Counter 0 COUNT
			gen_set_counter_count 0 3           || exit

			# Configure ~4.28 MHz on counter 0 compare regs 0&1
			gen_set_counter_comparator 0 0 6    || exit
			gen_set_counter_comparator 0 1 13   || exit

			# Configure 30 MHz on counter 0 compare regs 2&3&4
			gen_set_counter_comparator 0 2 16   || exit
			gen_set_counter_comparator 0 3 17   || exit
			gen_set_counter_comparator 0 4 18   || exit

			# Use Route 0 to reset Port A Pin 0 when compare reg 0 or 3 triggers
			gen_set_counter_match 0 0 0         || exit
			gen_set_counter_match 0 3 0         || exit
			gen_set_porta_reset   0   0         || exit

			# Use Route 1 to set Port A Pin 0 and reset counter 0 when compare reg 1 or 4 triggers
			gen_set_counter_match 0 1 1         || exit
			gen_set_counter_match 0 4 1         || exit
			gen_set_counter_reset 0   1         || exit
			gen_set_porta_set     0   1         || exit
		) || { res=$?; echo; echo error $res; }
	)
}

function set_routes () {
	local gen; gen=$(gen_set_routes "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function checkargs_set_routes () {
	if (($# < 2)); then
		return 1
	fi
	local reg=$1
	local val=$2
	if ! isint "$reg" || ((reg < 0xff00 || reg > 0xffff)); then
		return 1
	fi
	if ! isint "$val" || ((val < 0 || val > 0xffff)); then
		return 1
	fi
	shift 2
	sum=0
	while (($#)); do
		if ! isint "$1"; then
			return 1
		fi
		((sum |= (1 << $1)))
		shift
	done
}

function gen_set_routes () {
	local reg=$1
	local val=$2
	local sum
	checkargs_set_routes "$@" || return $?
	gen_set_atom $sum         || return $?
	echo wr $reg $val
}

function sysgen_set_routes () {
	local reg=$1
	local val=$2
	local sum
	checkargs_set_routes "$@" || return $?
	sysgen_set_atom $sum      || return $?
	echo "
		ld a, $val
		ld ($reg), a
	"
}

function set_always_one        () { set_routes        $ONES 0 "$@"; }
function gen_set_always_one    () { gen_set_routes    $ONES 0 "$@"; }
function sysgen_set_always_one () { sysgen_set_routes $ONES 0 "$@"; }

function checkargs_counter_routes () {
	if (($# < 1)) || ! isint "$1"; then
		return 1
	fi
}

function set_counter_count () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_COUNT "$@"
}

function gen_set_counter_count () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	gen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_COUNT "$@"
}

function sysgen_set_counter_count () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	sysgen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_COUNT "$@"
}

function set_counter_load () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_LOAD "$@"
}

function gen_set_counter_load () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	gen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_LOAD "$@"
}

function sysgen_set_counter_load () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	sysgen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_LOAD "$@"
}

function set_counter_reset () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_RESET "$@"
}

function gen_set_counter_reset () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	gen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_RESET "$@"
}

function sysgen_set_counter_reset () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	sysgen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_RESET "$@"
}

function set_counter_stop () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_STOP "$@"
}

function gen_set_counter_stop () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	gen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_STOP "$@"
}

function sysgen_set_counter_stop () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	sysgen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_STOP "$@"
}

function set_counter_start () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_START "$@"
}

function gen_set_counter_start () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	gen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_START "$@"
}

function sysgen_set_counter_start () {
	checkargs_counter_routes "$@" || return $?; local counter=$1; shift
	sysgen_set_routes ${COUNTER_SETIN[counter]} $COUNTER_SETIN_START "$@"
}

function checkargs_counter_comparator () {
	if (($# < 2)) || ! isint "$1" || ! isint "$2"; then
		return 1
	fi
}

function set_counter_match () {
	checkargs_counter_comparator "$@" || return $?; local counter=$1; local comparator=$2; shift 2
	set_routes ${COUNTER_SETOUT[counter]} $((1 << comparator)) "$@"
}

function gen_set_counter_match () {
	checkargs_counter_comparator "$@" || return $?; local counter=$1; local comparator=$2; shift 2
	gen_set_routes ${COUNTER_SETOUT[counter]} $((1 << comparator)) "$@"
}

function sysgen_set_counter_match () {
	checkargs_counter_comparator "$@" || return $?; local counter=$1; local comparator=$2; shift 2
	sysgen_set_routes ${COUNTER_SETOUT[counter]} $((1 << comparator)) "$@"
}

function checkargs_counter_comp_val () {
	if (($# != 3)) || ! isint "$1" || ! isint "$2" || ! isint "$3"; then
		return 1
	fi
}

function set_counter_comparator () {
	local gen; gen=$(gen_set_counter_comparator "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_set_counter_comparator () {
	checkargs_counter_comp_val "$@" || return $?; local counter=$1; local comparator=$2; local value=$3
	gen_set_atom $value || return $?
	echo "wr ${COUNTER_SETCMP[counter]} $((1 << comparator))"
}

function sysgen_set_counter_comparator () {
	checkargs_counter_comp_val "$@" || return $?; local counter=$1; local comparator=$2; local value=$3
	sysgen_set_atom $value || return $?
	echo "
		ld a, $((1 << comparator))
		ld (${COUNTER_SETCMP[counter]}), a
	"
}

function checkargs_counter_load () {
	if (($# != 2)) || ! isint "$1" || ! isint "$2"; then
		return 1
	fi
}

function set_counter_load () {
	local gen; gen=$(gen_set_counter_load "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_set_counter_load () {
	checkargs_counter_load "$@" || return $?; local counter=$1; local value=$2
	gen_set_atom $value || return $?
	echo "wr ${COUNTER_CTRL[counter]} $COUNTER_CTRL_SETLOAD"
}

function sysgen_set_counter_load () {
	checkargs_counter_load "$@" || return $?; local counter=$1; local value=$2
	sysgen_set_atom $value || return $?
	echo "
		ld a, $COUNTER_CTRL_SETLOAD
		ld (${COUNTER_CTRL[counter]}), a
	"
}

function checkargs_counter () {
	if (($# != 1)) || ! isint "$1"; then
		return 1
	fi
}

function count () {
	local gen; gen=$(gen_count "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_count () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "wr ${COUNTER_CTRL[counter]} $COUNTER_CTRL_COUNT"
}

function sysgen_count () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "
		ld a, $COUNTER_CTRL_COUNT
		ld (${COUNTER_CTRL[counter]}), a
	"
}

function reload_counter () {
	local gen; gen=$(gen_reload_counter "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_reload_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "wr ${COUNTER_CTRL[counter]} $COUNTER_CTRL_LOAD"
}

function sysgen_reload_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "
		ld a, $COUNTER_CTRL_LOAD
		ld (${COUNTER_CTRL[counter]}), a
	"
}

function reset_counter () {
	local gen; gen=$(gen_reset_counter "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_reset_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "wr ${COUNTER_CTRL[counter]} $COUNTER_CTRL_RESET"
}

function sysgen_reset_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "
		ld a, $COUNTER_CTRL_RESET
		ld (${COUNTER_CTRL[counter]}), a
	"
}

function stop_counter () {
	local gen; gen=$(gen_stop_counter "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_stop_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "wr ${COUNTER_CTRL[counter]} $COUNTER_CTRL_STOP"
}

function sysgen_stop_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "
		ld a, $COUNTER_CTRL_STOP
		ld (${COUNTER_CTRL[counter]}), a
	"
}

function start_counter () {
	local gen; gen=$(gen_start_counter "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_start_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "wr ${COUNTER_CTRL[counter]} $COUNTER_CTRL_START"
}

function sysgen_start_counter () {
	checkargs_counter "$@" || return $?; local counter=$1
	echo "
		ld a, $COUNTER_CTRL_START
		ld (${COUNTER_CTRL[counter]}), a
	"
}

function checkargs_port_routes () {
	if (($# < 1)) || ! isint "$1"; then
		return 1
	fi
}

function set_porta_set () {
	checkargs_port_routes "$@" || return $?; local pin=$1; shift
	set_routes $PA_SETTRIG $((1 << pin)) "$@"
}

function gen_set_porta_set () {
	checkargs_port_routes "$@" || return $?; local pin=$1; shift
	gen_set_routes $PA_SETTRIG $((1 << pin)) "$@"
}

function sysgen_set_porta_set () {
	checkargs_port_routes "$@" || return $?; local pin=$1; shift
	sysgen_set_routes $PA_SETTRIG $((1 << pin)) "$@"
}

function set_porta_reset () {
	checkargs_port_routes "$@" || return $?; local pin=$1; shift
	set_routes $PA_RESETTRIG $((1 << pin)) "$@"
}

function gen_set_porta_reset () {
	checkargs_port_routes "$@" || return $?; local pin=$1; shift
	gen_set_routes $PA_RESETTRIG $((1 << pin)) "$@"
}

function sysgen_set_porta_reset () {
	checkargs_port_routes "$@" || return $?; local pin=$1; shift
	sysgen_set_routes $PA_RESETTRIG $((1 << pin)) "$@"
}

function checkargs_port () {
	if (($# != 1)) || ! isint "$1"; then
		return 1
	fi
}

function set_porta () {
	local gen; gen=$(gen_set_porta "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_set_porta () {
	checkargs_port "$@" || return $?; local mask=$1
	echo "wr $PA_SET $mask"
}

function sysgen_set_porta () {
	checkargs_port "$@" || return $?; local mask=$1
	echo "
		ld a, $mask
		ld ($PA_SET), a
	"
}

function reset_porta () {
	local gen; gen=$(gen_reset_porta "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_reset_porta () {
	checkargs_port "$@" || return $?; local mask=$1
	echo "wr $PA_RESET $mask"
}

function sysgen_reset_porta () {
	checkargs_port "$@" || return $?; local mask=$1
	echo "
		ld a, $mask
		ld ($PA_RESET), a
	"
}

function checkargs_dut_comp () {
	if (($# != 3)) || ! isint "$1" || ! isint "$2" || ! isint "$3"; then
		return 1
	fi
}

function set_dut_comparator () {
	local gen; gen=$(gen_set_dut_comparator "$@") || return $?
	run >/dev/null < <(echo "$gen")
}

function gen_set_dut_comparator () {
	checkargs_dut_comp "$@" || return $?; local comparator=$1; local value=$2; local mask=$3
	gen_set_atom $value || return $?
	echo wr $DUT_CMP_IN $((1 << comparator))
	gen_set_atom $mask || return $?
	echo wr $DUT_CMP_IN $((1 << (comparator + 4)))
}

function sysgen_set_dut_comparator () {
	checkargs_dut_comp "$@" || return $?; local comparator=$1; local value=$2; local mask=$3
	sysgen_set_atom $value || return $?
	echo "
		ld a, $((1 << comparator))
		ld ($DUT_CMP_IN), a
	"
	sysgen_set_atom $mask || return $?
	echo "
		ld a, $((1 << (comparator + 4)))
		ld ($DUT_CMP_IN), a
	"
}

function checkargs_dut_comp_routes () {
	if (($# < 1)) || ! isint "$1"; then
		return 1
	fi
}

function set_dut_match () {
	checkargs_dut_comp_routes "$@" || return $?; local comparator=$1; shift
	set_routes $DUT_CMP_OUT $((1 << comparator)) "$@"
}

function gen_set_dut_match () {
	checkargs_dut_comp_routes "$@" || return $?; local comparator=$1; shift
	gen_set_routes $DUT_CMP_OUT $((1 << comparator)) "$@"
}

function sysgen_set_dut_match () {
	checkargs_dut_comp_routes "$@" || return $?; local comparator=$1; shift
	sysgen_set_routes $DUT_CMP_OUT $((1 << comparator)) "$@"
}

function set_dut_match_edge () {
	checkargs_dut_comp_routes "$@" || return $?; local comparator=$1; shift
	set_routes $DUT_CMP_OUT $((1 << (comparator + 4))) "$@"
}

function gen_set_dut_match_edge () {
	checkargs_dut_comp_routes "$@" || return $?; local comparator=$1; shift
	gen_set_routes $DUT_CMP_OUT $((1 << (comparator + 4))) "$@"
}

function sysgen_set_dut_match_edge () {
	checkargs_dut_comp_routes "$@" || return $?; local comparator=$1; shift
	sysgen_set_routes $DUT_CMP_OUT $((1 << (comparator + 4))) "$@"
}

function wait_for_halt () {
	if (($# > 1)); then
		return 1
	fi
	local timeout=${1--1}
	if ! isint "$timeout"; then
		return 1
	fi
	while true; do
		if ((timeout > 0)); then
			((timeout--))
		fi
		local res=0
		local errmsg
		errmsg=$(run r 2>&1 >/dev/null) || res=$?
		if ((res == 6)); then
			if ((timeout != 0)); then
				sleep 1
				continue
			fi
			echo Timeout! >&2
			return $res
		elif ((res != 0)); then
			echo "$errmsg" >&2
			return $res
		fi
		break
	done
}

function set_breakpoint () {
	if (($# != 1 && $# != 2)); then
		return 1
	fi
	local idx=$1
	local adr=${2-$((0xffff))}
	if ! isint "$idx" || ! isint "$adr"; then
		return 1
	fi
	run "b $idx $adr"
}

function asmgen_string () {
	local str=$*
	local chars=( $(echo -n "$str" | od -vAn -tx1 | sed -e 's,\([0-9a-zA-Z][0-9a-zA-Z]\),0x\1,g') )
	echo .db ${chars[*]}
}

function sys_run () {
	if (($# != 1 && $# != 2)); then
		return 1
	fi

	local adr=$1
	local timeout=${2--1}
	if ! isint "$adr" || ! isint "$timeout"; then
		return 1
	fi

	run h || return $?

	local len
	len=$(sys_code $adr < <(cat; echo; echo nop; echo "jr -2")) || return $?

	run "set pc $adr" || return $?

	# Set breakpoint on "jr -2" instruction at the end
	set_breakpoint 0 $((adr + len - 2)) || return $?

	local res

	run c || { res=$?; set_breakpoint 0; return $res; }

	res=0
	wait_for_halt $timeout || res=$?
	run h
	set_breakpoint 0
	return $res
}
