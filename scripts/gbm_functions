# Taken from https://github.com/sanni/cartreader/blob/master/Cart_Reader/GBM.ino
# Documentation: http://iceboy.a-singer.de/doc/np_gb_memory.html
function gbm_send () {
	local cmd=$(($1))
	local adr=$2
	local data=$3

	{
		echo wr 0x0120 $cmd

		# Cmds without args:
		#  0x02: Disable write protect
		#  0x03: Enable write protect
		#  0x04: Disable mapping; map entire flash
		#  0x05: Enable mapping; restores mapping previously selected by 0xc<n> cmd
		#  0x08: Disable access to MMC registers 0x120..0x13f
		#  0x10: Disable access to MBC registers like 0x2000
		#  0x11: Enable access to MBC registers like 0x2000
		#  0xc<n>: Switch to mapping <n>

		case "$cmd" in
			$((0x09)))  # Enable access to MMC registers 0x120..0x13f
				echo wr 0x0121 0xaa
				echo wr 0x0122 0x55
				;;
			$((0x0a)))  # Unlock changing write protect
				echo wr 0x0125 0x62
				echo wr 0x0126 0x04
				;;
			$((0x0f)))  # Write address/byte to flash
				echo wr 0x0125 $((adr >> 8))
				echo wr 0x0126 $((adr & 0xff))
				echo wr 0x0127 $((data))
				;;
		esac

		echo wr 0x013f 0xa5
	} | gbdbg $DEV
}

function gbm_detect () {
	gbm_send 0x09
	local tmp=$(echo rd 0x120 | gbdbg $DEV)
	((tmp == 0x21))
}

function gbm_select_map_entry () {
	local entry=$1
	gbm_send 0x09
	gbm_send $((0xc0 | entry))
}

function gbm_unmap () {
	gbm_send 0x09
	gbm_send 0x04
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_reset_flash () {
	gbm_send 0x09
	gbm_send 0x10
	# We issue two reset commands to the same address in direct succession, just in case the flash chip
	# is currently receiving data into its write buffer prior to a program operation. Two reset commands
	# issued to the same address will cause exiting from this mode without starting the program operation.
	echo wr 0 0xf0 | gbdbg $DEV
	echo wr 0 0xf0 | gbdbg $DEV
	sleep 0.1
	# We try resetting the flash a third time after 100 ms, just in case there was a program or erase
	# operation ongoing the first and second time. Reset has no effect during such an operation.
	echo wr 0 0xf0 | gbdbg $DEV
}

# Restores the state that the cartridge will have on power up.
function gbm_reset () {
	gbm_send 0x09
	gbm_send 0x0a
	gbm_send 0x03
	gbm_reset_flash
	gbm_send 0xc0
}

function gbm_read_flash_id () {
	gbm_send 0x09
	gbm_send 0x04
	gbm_send 0x10
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x90 | gbdbg $DEV
	local flashid=$(($(echo rd 0 | gbdbg $DEV) << 8))
	flashid=$((flashid | $(echo rd 1 | gbdbg $DEV)))
	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
	printf 0x%04x\\n $flashid
}

function gbm_is_sector0_protected () {
	gbm_send 0x09
	gbm_send 0x04
	gbm_send 0x10
	gbm_send 0x0a
	gbm_send 0x03
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0xa0 | gbdbg $DEV
	local tmp=$(echo rd 0 | gbdbg $DEV)
	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
	return $(((tmp & 0x02) == 0))
}

function gbm_wait_busy () {
	local status=0
	while (((status & 0x80) != 0x80)); do
		status=$(echo rd 0 | gbdbg $DEV)
	done
}

function gbm_protect_sector0 () {
	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	# Automatically selects ROM bank 1
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	# Protect sector 0 from erase and program operations
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x20 | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_unprotect_sector0 () {
	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	# Automatically selects ROM bank 1
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	# Remove sector 0 protection
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x40 | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_erase_flash () {
	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	# Automatically selects ROM bank 1
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	# Unprotect sector 0, allowing erase and program operations.
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x40 | gbdbg $DEV
	gbm_wait_busy

	# Erase flash
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x80 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x10 | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_erase_sector () {
	local sector=$1

	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	gbm_send 0x04

	# Select bank ((sector * 0x20000) / 0x4000) + 1
	#  +1 because address needs to be odd, so that A14 is high if accessing address 0x4000-0x7fff
	gbm_send 0x11
	echo wr 0x2000 $((sector * 8 + 1)) | gbdbg $DEV
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	if ((sector == 0)); then
		# Unprotect sector 0, allowing erase and program operations.
		echo wr 0x5555 0xaa | gbdbg $DEV
		echo wr 0x2aaa 0x55 | gbdbg $DEV
		echo wr 0x5555 0x60 | gbdbg $DEV
		echo wr 0x5555 0xaa | gbdbg $DEV
		echo wr 0x2aaa 0x55 | gbdbg $DEV
		echo wr 0x5555 0x40 | gbdbg $DEV
		gbm_wait_busy
	fi

	# Erase sector
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x80 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x30 | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_write_flash () {
	local verbose=
	if [ "$1" == -v ]; then
		verbose=y
	fi
	declare -a data
	readarray -tn $((1024 * 1024)) data < <(hexdump -ve '/1 "%u\n"')
	local idx=0
	local cnt=${#data[*]}

	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	local adr=0
	local bank

	for ((bank = 1; bank < 64 && idx < cnt; bank++)); do
		if ((bank > 1)); then
			((adr = 0x4000))

			if [ -n "$verbose" ]; then
				echo -n Writing bank $bank >&2
			fi
		else
			if [ -n "$verbose" ]; then
				echo -n Writing banks 0\&1 >&2
			fi
		fi

		for ((; adr < 0x7fff; adr += 128)); do
			if [ -n "$verbose" ]; then
				echo -n . >&2
			fi

			gbdbg $DEV < <(
				# We exploit the "disable MMC commands" command to select ROM bank 1 for us. This way
				# we don't need to enable and disable MBC registers and can accomplish the same
				# thing with fewer memory accesses.
				echo wr 0x0120 0x04
				echo wr 0x013f 0xa5
				# Write flash buffer command
				echo wr 0x5555 0xaa
				echo wr 0x2aaa 0x55
				echo wr 0x5555 0xa0
				# Enable MBC registers
				echo wr 0x0120 0x11
				echo wr 0x013f 0xa5
				# Select bank
				echo wr 0x2000 $bank
				# Disable MBC registers
				echo wr 0x0120 0x10
				echo wr 0x013f 0xa5

				for ((i = 0; i < 128; i++, idx++)); do
					if ((idx < cnt)); then
						echo wr $i ${data[idx]}
					else
						echo wr $i 0xff
					fi
				done

				# Execute write
				echo wr $((adr + 127)) 0xff
			)
			((idx += 128)) # update idx after subshell
			gbm_wait_busy
		done

		if [ -n "$verbose" ]; then
			echo >&2
		fi
	done

	# Protect sector 0 from erase and program operations.
	# ROM bank should already be odd (63).
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x20 | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_unlock_map () {
	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	# Automatically selects ROM bank 1
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Enable map area
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x77 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x77 | gbdbg $DEV

	gbm_send 0x11
	gbm_send 0x08
}

function gbm_erase_map () {
	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	# Automatically selects ROM bank 1
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	# Erase map
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x04 | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}

function gbm_write_map () {
	declare -a data
	readarray -tn 256 data < <(hexdump -ve '/1 "%u\n"')
	local cnt=${#data[*]}

	# Enable MMC registers
	gbm_send 0x09

	# Disable mapping
	# Automatically selects ROM bank 1
	gbm_send 0x04

	# Disable MBC registers
	gbm_send 0x10

	# Disable write protect
	gbm_send 0x0a
	gbm_send 0x02

	# Initiate write to map
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0xe0 | gbdbg $DEV

	local i
	for ((i = 0; i < 128; i++)); do
		if ((i < cnt)); then
			echo wr $i ${data[i]}
		else
			echo wr $i 0xff
		fi
	done | gbdbg $DEV

	# Execute write
	echo wr 127 0xff | gbdbg $DEV
	gbm_wait_busy

	# Initiate write to map
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0x60 | gbdbg $DEV
	echo wr 0x5555 0xaa | gbdbg $DEV
	echo wr 0x2aaa 0x55 | gbdbg $DEV
	echo wr 0x5555 0xe0 | gbdbg $DEV

	local i
	for ((i = 0; i < 128; i++)); do
		if ((i+128 < cnt)); then
			echo wr $i ${data[i+128]}
		else
			echo wr $i 0xff
		fi
	done | gbdbg $DEV

	# Execute write
	echo wr 255 0xff | gbdbg $DEV
	gbm_wait_busy

	# Enable write protect
	gbm_send 0x03

	gbm_reset_flash
	gbm_send 0x11
	gbm_send 0x08
}
